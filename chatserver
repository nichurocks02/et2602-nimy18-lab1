#!/usr/bin/python3
import socket
import sys
from _thread import *
import select 
import re 

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)


Info = (sys.argv[1])
a=Info.split(':')
IP_addr=str(a[0])
port=int(a[1])

server.bind((IP_addr,port))
'''binds ip and port of the server to enable it for listening and opening port'''
server.listen(100)
'''buffer for clients'''
print('Hello my name is Jarvis, Welcome to the chat server')
print('Waiting for connections')


clients=[]
clients.append(server)

def clientthread(conn,addr):
    nick=conn.recv(2048).decode('utf-8')
    nick1=nick.strip('NICK ')
    regex = re.compile('[@!#$%^&*()?/|}{~:]')
    if(regex.search(nick1) == None) and len(nick1)<=12:
        conn.sendall('OK'.encode('utf-8'))
    	
    else:
        conn.sendall('ERR malformed nick name'.encode('utf-8'))
        
        nick1 = 'anonomous'
        

    while True:
        try:
            message = conn.recv(2048).decode('utf-8')
            message1=message.strip('MSG ')
            
            if not message:
            	conn.close()
                print(addr[0]+" has disconnected")
                clients.remove(conn)
            	break 

            elif 'MSG ' not in message:
                conn.sendall('ERROR malformed message'.encode('utf-8'))
            else:

                
                if len(message1)<=255 :
                    
                    count=0
                    for i in message1[:-1]:
                        if ord(i)<31:
                            
                            count = count +1
                            
                        else:
                            pass
                    #logic for checking control        
                    if count != 0:
                        conn.sendall('ERROR -> dont use control characters'.encode('utf-8'))
                    else:
                        message_to_send = 'MSG '+nick1+' ' + message1
                
                        broadcasting(message_to_send,conn,nick1)
                   
            	elif len(message1) > 255 :
                    conn.sendall('ERROR -> message length exceeding 256 characters'.encode('utf-8'))
                   
                

        except KeyboardInterrupt:
            conn.close()
            break

def broadcasting(message,connection,nick1):
    for sockets in clients:
        if sockets!= server:
            try:
                sockets.sendall(message.encode('utf-8'))
            except KeyboardInterrupt:
                    clients.remove(sockets)
                    break 
''' above function is used to broadcast message received from one client
 to every active client connected to the server except the server itself'''


while True:
    conn,addr=server.accept()
    #accepts incoming connections 
    conn.sendall('Hello 1'.encode('utf-8'))
    clients.append(conn)
    print(addr[0]+" has connected")
    
    start_new_thread(clientthread,(conn,addr))
    #starts a new process for every new client that is connected

conn.close()
server.close()     





